// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/srvcomic.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/srvcomic.proto

It has these top-level messages:
	ComicFilterRequest
	ComicRowResponse
	ComicListResponse
	AddComicResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ComicFilterRequest struct {
	ComicId int64 `protobuf:"varint,1,opt,name=comic_id,json=comicId" json:"comic_id,omitempty"`
	Status  int64 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	RowNum  int64 `protobuf:"varint,3,opt,name=row_num,json=rowNum" json:"row_num,omitempty"`
	PageNum int64 `protobuf:"varint,4,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
}

func (m *ComicFilterRequest) Reset()                    { *m = ComicFilterRequest{} }
func (m *ComicFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*ComicFilterRequest) ProtoMessage()               {}
func (*ComicFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ComicFilterRequest) GetComicId() int64 {
	if m != nil {
		return m.ComicId
	}
	return 0
}

func (m *ComicFilterRequest) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ComicFilterRequest) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *ComicFilterRequest) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

type ComicRowResponse struct {
	ComicId    int64  `protobuf:"varint,1,opt,name=comic_id,json=comicId" json:"comic_id,omitempty"`
	ComicName  string `protobuf:"bytes,2,opt,name=comic_name,json=comicName" json:"comic_name,omitempty"`
	CreateTime int64  `protobuf:"varint,3,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	Status     int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
}

func (m *ComicRowResponse) Reset()                    { *m = ComicRowResponse{} }
func (m *ComicRowResponse) String() string            { return proto.CompactTextString(m) }
func (*ComicRowResponse) ProtoMessage()               {}
func (*ComicRowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ComicRowResponse) GetComicId() int64 {
	if m != nil {
		return m.ComicId
	}
	return 0
}

func (m *ComicRowResponse) GetComicName() string {
	if m != nil {
		return m.ComicName
	}
	return ""
}

func (m *ComicRowResponse) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ComicRowResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ComicListResponse struct {
	RowsTotal int64               `protobuf:"varint,1,opt,name=rows_total,json=rowsTotal" json:"rows_total,omitempty"`
	PageNum   int64               `protobuf:"varint,2,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	RowNum    int64               `protobuf:"varint,3,opt,name=row_num,json=rowNum" json:"row_num,omitempty"`
	PageTotal int64               `protobuf:"varint,4,opt,name=page_total,json=pageTotal" json:"page_total,omitempty"`
	Data      []*ComicRowResponse `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *ComicListResponse) Reset()                    { *m = ComicListResponse{} }
func (m *ComicListResponse) String() string            { return proto.CompactTextString(m) }
func (*ComicListResponse) ProtoMessage()               {}
func (*ComicListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ComicListResponse) GetRowsTotal() int64 {
	if m != nil {
		return m.RowsTotal
	}
	return 0
}

func (m *ComicListResponse) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *ComicListResponse) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *ComicListResponse) GetPageTotal() int64 {
	if m != nil {
		return m.PageTotal
	}
	return 0
}

func (m *ComicListResponse) GetData() []*ComicRowResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddComicResponse struct {
	ComicId int64 `protobuf:"varint,1,opt,name=comic_id,json=comicId" json:"comic_id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AddComicResponse) Reset()                    { *m = AddComicResponse{} }
func (m *AddComicResponse) String() string            { return proto.CompactTextString(m) }
func (*AddComicResponse) ProtoMessage()               {}
func (*AddComicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddComicResponse) GetComicId() int64 {
	if m != nil {
		return m.ComicId
	}
	return 0
}

func (m *AddComicResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*ComicFilterRequest)(nil), "pb.ComicFilterRequest")
	proto.RegisterType((*ComicRowResponse)(nil), "pb.ComicRowResponse")
	proto.RegisterType((*ComicListResponse)(nil), "pb.ComicListResponse")
	proto.RegisterType((*AddComicResponse)(nil), "pb.AddComicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ComicService service

type ComicServiceClient interface {
	GetComicRowById(ctx context.Context, in *ComicFilterRequest, opts ...grpc.CallOption) (*ComicRowResponse, error)
	AddComic(ctx context.Context, in *ComicRowResponse, opts ...grpc.CallOption) (*AddComicResponse, error)
	GetComicListByPage(ctx context.Context, in *ComicFilterRequest, opts ...grpc.CallOption) (*ComicListResponse, error)
}

type comicServiceClient struct {
	cc *grpc.ClientConn
}

func NewComicServiceClient(cc *grpc.ClientConn) ComicServiceClient {
	return &comicServiceClient{cc}
}

func (c *comicServiceClient) GetComicRowById(ctx context.Context, in *ComicFilterRequest, opts ...grpc.CallOption) (*ComicRowResponse, error) {
	out := new(ComicRowResponse)
	err := grpc.Invoke(ctx, "/pb.ComicService/GetComicRowById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicServiceClient) AddComic(ctx context.Context, in *ComicRowResponse, opts ...grpc.CallOption) (*AddComicResponse, error) {
	out := new(AddComicResponse)
	err := grpc.Invoke(ctx, "/pb.ComicService/AddComic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicServiceClient) GetComicListByPage(ctx context.Context, in *ComicFilterRequest, opts ...grpc.CallOption) (*ComicListResponse, error) {
	out := new(ComicListResponse)
	err := grpc.Invoke(ctx, "/pb.ComicService/GetComicListByPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ComicService service

type ComicServiceServer interface {
	GetComicRowById(context.Context, *ComicFilterRequest) (*ComicRowResponse, error)
	AddComic(context.Context, *ComicRowResponse) (*AddComicResponse, error)
	GetComicListByPage(context.Context, *ComicFilterRequest) (*ComicListResponse, error)
}

func RegisterComicServiceServer(s *grpc.Server, srv ComicServiceServer) {
	s.RegisterService(&_ComicService_serviceDesc, srv)
}

func _ComicService_GetComicRowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComicFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicServiceServer).GetComicRowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ComicService/GetComicRowById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicServiceServer).GetComicRowById(ctx, req.(*ComicFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicService_AddComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComicRowResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicServiceServer).AddComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ComicService/AddComic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicServiceServer).AddComic(ctx, req.(*ComicRowResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicService_GetComicListByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComicFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicServiceServer).GetComicListByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ComicService/GetComicListByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicServiceServer).GetComicListByPage(ctx, req.(*ComicFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ComicService",
	HandlerType: (*ComicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComicRowById",
			Handler:    _ComicService_GetComicRowById_Handler,
		},
		{
			MethodName: "AddComic",
			Handler:    _ComicService_AddComic_Handler,
		},
		{
			MethodName: "GetComicListByPage",
			Handler:    _ComicService_GetComicListByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/srvcomic.proto",
}

func init() { proto.RegisterFile("pb/srvcomic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdd, 0x6a, 0xea, 0x40,
	0x10, 0xc7, 0x8d, 0xdf, 0x19, 0x0f, 0x1c, 0x5d, 0xce, 0x47, 0xce, 0x01, 0x39, 0x92, 0x2b, 0xaf,
	0x3c, 0x60, 0x6f, 0x7a, 0xab, 0xa5, 0x95, 0x42, 0x91, 0x92, 0x7a, 0x1f, 0x36, 0xc9, 0x20, 0x01,
	0xd7, 0x4d, 0x77, 0x37, 0x06, 0xe9, 0x75, 0x9f, 0xa7, 0xef, 0xd2, 0x27, 0x2a, 0xbb, 0x6b, 0x44,
	0x45, 0x4b, 0x2f, 0xe7, 0x3f, 0xb3, 0xf3, 0xff, 0xcd, 0xcc, 0x42, 0x2f, 0x8b, 0xfe, 0x4b, 0xb1,
	0x89, 0x39, 0x4b, 0xe3, 0x51, 0x26, 0xb8, 0xe2, 0xa4, 0x9a, 0x45, 0xfe, 0x0b, 0x90, 0x1b, 0x2d,
	0xdd, 0xa5, 0x2b, 0x85, 0x22, 0xc0, 0xe7, 0x1c, 0xa5, 0x22, 0x7f, 0xa0, 0x6d, 0x0a, 0xc3, 0x34,
	0xf1, 0x9c, 0x81, 0x33, 0xac, 0x05, 0x2d, 0x13, 0xdf, 0x27, 0xe4, 0x17, 0x34, 0xa5, 0xa2, 0x2a,
	0x97, 0x5e, 0xd5, 0x24, 0x76, 0x11, 0xf9, 0x0d, 0x2d, 0xc1, 0x8b, 0x70, 0x9d, 0x33, 0xaf, 0x66,
	0x13, 0x82, 0x17, 0xf3, 0x9c, 0xe9, 0x5e, 0x19, 0x5d, 0xa2, 0xc9, 0xd4, 0x6d, 0x2f, 0x1d, 0xcf,
	0x73, 0xe6, 0xbf, 0x3a, 0xd0, 0x35, 0xee, 0x01, 0x2f, 0x02, 0x94, 0x19, 0x5f, 0x4b, 0xfc, 0xcc,
	0xbb, 0x0f, 0x60, 0x53, 0x6b, 0xca, 0xd0, 0xf8, 0xbb, 0x81, 0x6b, 0x94, 0x39, 0x65, 0x48, 0xfe,
	0x41, 0x27, 0x16, 0x48, 0x15, 0x86, 0x2a, 0x65, 0xb8, 0xc3, 0x00, 0x2b, 0x2d, 0x52, 0x86, 0x07,
	0xec, 0x1a, 0xa4, 0x51, 0xb2, 0xfb, 0x6f, 0x0e, 0xf4, 0x0c, 0xc7, 0x43, 0x2a, 0xd5, 0x1e, 0xa4,
	0x0f, 0x20, 0x78, 0x21, 0x43, 0xc5, 0x15, 0x5d, 0xed, 0x50, 0x5c, 0xad, 0x2c, 0xb4, 0x70, 0x34,
	0x57, 0xf5, 0x68, 0xae, 0xcb, 0xbb, 0xe8, 0x03, 0x98, 0x37, 0xb6, 0xa5, 0xdd, 0x86, 0xab, 0x15,
	0xdb, 0x72, 0x08, 0xf5, 0x84, 0x2a, 0xea, 0x35, 0x06, 0xb5, 0x61, 0x67, 0xfc, 0x63, 0x94, 0x45,
	0xa3, 0xd3, 0xf5, 0x04, 0xa6, 0xc2, 0x9f, 0x41, 0x77, 0x92, 0x24, 0x36, 0xf9, 0x85, 0xc5, 0x79,
	0xd0, 0x92, 0x79, 0x1c, 0xa3, 0xb4, 0x57, 0x6b, 0x07, 0x65, 0x38, 0x7e, 0x77, 0xe0, 0x9b, 0x69,
	0xf3, 0x84, 0x62, 0x93, 0xc6, 0x48, 0x26, 0xf0, 0x7d, 0x86, 0xaa, 0xb4, 0x9d, 0x6e, 0xf5, 0xc9,
	0xf7, 0x20, 0x47, 0xbf, 0xe4, 0xef, 0x59, 0x40, 0xbf, 0x42, 0xae, 0xa1, 0x5d, 0xc2, 0x91, 0xb3,
	0x35, 0xf6, 0xe5, 0xe9, 0x00, 0x7e, 0x85, 0xdc, 0x02, 0x29, 0xcd, 0xf5, 0x29, 0xa6, 0xdb, 0x47,
	0xba, 0xc4, 0x8b, 0xfe, 0x3f, 0xf7, 0xfa, 0xe1, 0xdd, 0xfc, 0x4a, 0xd4, 0x34, 0xff, 0xfb, 0xea,
	0x23, 0x00, 0x00, 0xff, 0xff, 0xde, 0x06, 0x88, 0xac, 0xf4, 0x02, 0x00, 0x00,
}
